# -*- coding: utf-8 -*-

import src.python.models.optimal_gaussian_process as gp


def input_from_space(xstart_file, ystart_file, xdescrip_file):
    """Make a GPP from space files"""
    domain = []
    x_vals = []
    y_vals = []
    ignore_first = {"d":2, "x":1, "y":1}
    file_dict = {"d":xdescrip_file, "x":xstart_file, "y":ystart_file}
    data_dict = {"d":domain, "x":x_vals, "y":y_vals}
    for in_type in ["d", "x", "y"]:
        fin = open(file_dict[in_type], 'r')
        lines_found = 0
        for line in fin:
            if line[0:2] == "--": # how sections are distinguished
                lines_found += 1
                continue
            if lines_found == 2:
                print line
                data = line.split(' ')
                if in_type == "y": # only one var
                    y_vals.append(float(data[-1]))
                else:
                    point = []
                    for data_point in data[ignore_first[in_type]:]:
                        point.append(float(data_point))
                    data_dict[in_type].append(point)

    GPP = gp.GaussianProcess(domain=domain)

    for i, point in enumerate(x_vals):
        s = gp.SamplePoint(point, y_vals[i], 0.0)
        GPP.add_sample_point(s)

    return GPP

def output_to_space(GPP, name_prefix=""):
    """output the contents of a GPP to files that space can read in"""
    if not GPP.points_sampled:
        print "No points sampled. No space output."
        return 0

    ## (x|y)start.mat
    for out_type in ["x", "y"]:
        file_name = "%s%sstart.mat" % (name_prefix, out_type)
        fout = open(file_name, 'w')
        fout.write("# %s\n# Generated by GPP_plotter.py\n--\nCase" % file_name)
        if out_type == "x":
            point_dim = numpy.size(GPP.points_sampled[0].point)
        else:
            point_dim = 1

        for i in range(point_dim):
            fout.write(" %s%i" % (out_type, i+1))
        fout.write("\n--\n")
        for i, sample_point in enumerate(GPP.points_sampled):
            fout.write("%i" % (i+1))

            if out_type == "x":
                for el in sample_point.point:
                    fout.write(" %lf" % el)
            else:
                fout.write(" %lf" % sample_point.value)
            fout.write("\n")
        fout.close()

    ## xdescrip.mat
    file_name = "%sxdescrip.mat" % (name_prefix)
    fout = open(file_name, 'w')
    fout.write("# %s\n# Generated by GPP_plotter.py\n--\nCase Variable Min Max\n--" % file_name)
    for i,domain_sub in enumerate(GPP.domain):
        fout.write("%i x%i %lf %lf\n" % (i+1, i+1, domain_sub[0], domain_sub[1]))
    fout.close()
